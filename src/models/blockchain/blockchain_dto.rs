use crate::models::blockchain::{BlockchainScore, HeightInfo};
use crate::models::uint_64::Uint64Dto;
use crate::models::upgrade_dto::UpgradeDto;
use crate::models::entity_dto::EntityType;

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub(crate) struct HeightInfoDto {
    #[serde(rename = "height")]
    height: Uint64Dto,
}

impl HeightInfoDto {
    pub fn to_struct(&self) -> HeightInfo {
        HeightInfo {
            height: self.height.to_struct()
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub(crate) struct BlockchainScoreDto {
    #[serde(rename = "scoreHigh")]
    score_high: Uint64Dto,
    #[serde(rename = "scoreLow")]
    score_low: Uint64Dto,
}

impl BlockchainScoreDto {
    pub fn to_struct(&self) -> BlockchainScore {
        BlockchainScore {
            score_high: self.score_high.to_struct(),
            score_low: self.score_low.to_struct(),
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub(crate) struct BlockchainUpgradeBodyDto {
    #[serde(rename = "upgradePeriod")]
    upgrade_period: Uint64Dto,
    #[serde(rename = "newBlockChainVersion")]
    new_block_chain_version: Uint64Dto,
}

impl BlockchainUpgradeBodyDto {
    pub fn new(upgrade_period: Uint64Dto, new_block_chain_version: Uint64Dto) -> BlockchainUpgradeBodyDto {
        BlockchainUpgradeBodyDto {
            upgrade_period,
            new_block_chain_version,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub(crate) struct BlockchainUpgradeDto {
    #[serde(rename = "blockchainUpgrade")]
    blockchain_upgrade: UpgradeDto,
}

impl BlockchainUpgradeDto {
    pub fn new(blockchain_upgrade: UpgradeDto) -> BlockchainUpgradeDto {
        BlockchainUpgradeDto {
            blockchain_upgrade,
        }
    }
}

/// BlockchainUpgradeTransactionDto : Transaction that change version of blockchain.
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub(crate) struct BlockchainUpgradeTransactionDto {
    /// The signature of the entity. The signature was generated by the signer and can be used to validate tha the entity data was not modified by a node.
    #[serde(rename = "signature")]
    signature: String,
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    version: i32,
    #[serde(rename = "type")]
    _type: EntityType,
    #[serde(rename = "max_fee")]
    max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    deadline: Uint64Dto,
    #[serde(rename = "upgradePeriod")]
    upgrade_period: Uint64Dto,
    #[serde(rename = "newBlockChainVersion")]
    new_block_chain_version: Uint64Dto,
}

impl BlockchainUpgradeTransactionDto {
    /// Transaction that change version of blockchain.
    pub fn new(signature: String, signer: String, version: i32, _type: EntityType, max_fee: Uint64Dto, deadline: Uint64Dto, upgrade_period: Uint64Dto, new_block_chain_version: Uint64Dto) -> BlockchainUpgradeTransactionDto {
        BlockchainUpgradeTransactionDto {
            signature,
            signer,
            version,
            _type,
            max_fee,
            deadline,
            upgrade_period,
            new_block_chain_version,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct EmbeddedBlockchainUpgradeTransactionDto {
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    version: i32,
    #[serde(rename = "type")]
    _type: EntityType,
    #[serde(rename = "max_fee")]
    max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    deadline: Uint64Dto,
    #[serde(rename = "upgradePeriod")]
    upgrade_period: Uint64Dto,
    #[serde(rename = "newBlockChainVersion")]
    new_block_chain_version: Uint64Dto,
}

impl EmbeddedBlockchainUpgradeTransactionDto {
    pub fn new(signer: String, version: i32, _type: EntityType, max_fee: Uint64Dto, deadline: Uint64Dto, upgrade_period: Uint64Dto, new_block_chain_version: Uint64Dto) -> EmbeddedBlockchainUpgradeTransactionDto {
        EmbeddedBlockchainUpgradeTransactionDto {
            signer,
            version,
            _type,
            max_fee,
            deadline,
            upgrade_period,
            new_block_chain_version,
        }
    }
}

