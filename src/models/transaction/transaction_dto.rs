use crate::models::blockchain::EmbeddedBlockchainUpgradeTransactionDto;
use crate::models::mosaic::MosaicDto;
use crate::models::message::MessageDto;
use crate::models::uint_64::Uint64Dto;
use crate::models::entity_dto::EntityType;

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionDto {
    /// The signature of the entity. The signature was generated by the signer and can be used to validate tha the entity data was not modified by a node. 
    #[serde(rename = "signature")]
    pub signature: String,
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    pub signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    pub version: i32,
    #[serde(rename = "type")]
    pub _type: EntityType,
    #[serde(rename = "max_fee")]
    pub max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    pub deadline: Uint64Dto,
}

impl TransactionDto {
    pub fn new(signature: String, signer: String, version: i32, _type: EntityType, max_fee: Uint64Dto, deadline: Uint64Dto) -> TransactionDto {
        TransactionDto {
            signature,
            signer,
            version,
            _type,
            max_fee,
            deadline,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionBodyDto {
    #[serde(rename = "max_fee")]
    pub max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    pub deadline: Uint64Dto,
}

impl TransactionBodyDto {
    pub fn new(max_fee: Uint64Dto, deadline: Uint64Dto) -> TransactionBodyDto {
        TransactionBodyDto {
            max_fee,
            deadline,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionHashes {
    /// The array of transaction hashes.
    #[serde(rename = "hashes", skip_serializing_if = "Option::is_none")]
    pub hashes: Option<Vec<String>>,
}

impl TransactionHashes {
    pub fn new() -> TransactionHashes {
        TransactionHashes {
            hashes: None,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionIds {
    /// The array of transaction ids.
    #[serde(rename = "transactionIds", skip_serializing_if = "Option::is_none")]
    pub transaction_ids: Option<Vec<String>>,
}

impl TransactionIds {
    pub fn new() -> TransactionIds {
        TransactionIds {
            transaction_ids: None,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionInfoDto {
    #[serde(rename = "meta")]
    pub meta: TransactionMetaDto,
    #[serde(rename = "transaction")]
    pub transaction: EmbeddedBlockchainUpgradeTransactionDto,
}

impl TransactionInfoDto {
    pub fn new(meta: TransactionMetaDto, transaction: EmbeddedBlockchainUpgradeTransactionDto) -> TransactionInfoDto {
        TransactionInfoDto {
            meta,
            transaction,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionMetaDto {
    #[serde(rename = "height")]
    pub height: Uint64Dto,
    #[serde(rename = "hash")]
    pub hash: String,
    #[serde(rename = "merkleComponentHash")]
    pub merkle_component_hash: String,
    #[serde(rename = "index")]
    pub index: i32,
    #[serde(rename = "id")]
    pub id: String,
}

impl TransactionMetaDto {
    pub fn new(height: Uint64Dto, hash: String, merkle_component_hash: String, index: i32, id: String) -> TransactionMetaDto {
        TransactionMetaDto {
            height,
            hash,
            merkle_component_hash,
            index,
            id,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionPayload {
    /// The transaction payload.
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
}

impl TransactionPayload {
    pub fn new() -> TransactionPayload {
        TransactionPayload {
            payload: None,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionStatusDto {
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(rename = "status")]
    pub status: String,
    #[serde(rename = "hash", skip_serializing_if = "Option::is_none")]
    pub hash: Option<String>,
    #[serde(rename = "deadline", skip_serializing_if = "Option::is_none")]
    pub deadline: Option<Uint64Dto>,
    #[serde(rename = "height", skip_serializing_if = "Option::is_none")]
    pub height: Option<Uint64Dto>,
}

impl TransactionStatusDto {
    pub fn new(status: String) -> TransactionStatusDto {
        TransactionStatusDto {
            group: None,
            status,
            hash: None,
            deadline: None,
            height: None,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferTransactionBodyDto {
    /// If the bit 0 of byte 0 is not set (like in 0x90), then it is a regular address. Else (e.g. 0x91) it represents a namespace id which starts at byte 1.
    #[serde(rename = "recipient")]
    pub recipient: String,
    /// The array of mosaics sent to the recipient. If the most significant bit of byte 0 is set, a namespaceId (alias) is used instead of a instead of a mosaic_id corresponds to a mosaic_id.
    #[serde(rename = "mosaics")]
    pub mosaics: Vec<MosaicDto>,
    #[serde(rename = "message")]
    pub message: MessageDto,
}

impl TransferTransactionBodyDto {
    pub fn new(recipient: String, mosaics: Vec<MosaicDto>, message: MessageDto) -> TransferTransactionBodyDto {
        TransferTransactionBodyDto {
            recipient,
            mosaics,
            message,
        }
    }
}

/// TransferTransactionDto : Transaction that transfers mosaics and messages to another account.
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferTransactionDto {
    /// The signature of the entity. The signature was generated by the signer and can be used to validate tha the entity data was not modified by a node.
    #[serde(rename = "signature")]
    pub signature: String,
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    pub signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    pub version: i32,
    #[serde(rename = "type")]
    pub _type: EntityType,
    #[serde(rename = "max_fee")]
    pub max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    pub deadline: Uint64Dto,
    /// If the bit 0 of byte 0 is not set (like in 0x90), then it is a regular address. Else (e.g. 0x91) it represents a namespace id which starts at byte 1.
    #[serde(rename = "recipient")]
    pub recipient: String,
    /// The array of mosaics sent to the recipient. If the most significant bit of byte 0 is set, a namespaceId (alias) is used instead of a instead of a mosaic_id corresponds to a mosaic_id.
    #[serde(rename = "mosaics")]
    pub mosaics: Vec<crate::models::mosaic::MosaicDto>,
    #[serde(rename = "message")]
    pub message: crate::models::message::MessageDto,
}

impl TransferTransactionDto {
    /// Transaction that transfers mosaics and messages to another account.
    pub fn new(signature: String, signer: String, version: i32, _type: EntityType, max_fee: Uint64Dto, deadline: Uint64Dto, recipient: String, mosaics: Vec<crate::models::mosaic::MosaicDto>, message: crate::models::message::MessageDto) -> TransferTransactionDto {
        TransferTransactionDto {
            signature,
            signer,
            version,
            _type,
            max_fee,
            deadline,
            recipient,
            mosaics,
            message,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct EmbeddedTransactionDto {
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    pub signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    pub version: i32,
    #[serde(rename = "type")]
    pub _type: EntityType,
    #[serde(rename = "max_fee")]
    pub max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    pub deadline: Uint64Dto,
}

impl EmbeddedTransactionDto {
    pub fn new(signer: String, version: i32, _type: EntityType, max_fee: Uint64Dto, deadline: Uint64Dto) -> EmbeddedTransactionDto {
        EmbeddedTransactionDto {
            signer,
            version,
            _type,
            max_fee,
            deadline,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct EmbeddedTransactionInfoDto {
    #[serde(rename = "meta")]
    pub meta: EmbeddedTransactionMetaDto,
    #[serde(rename = "transaction")]
    pub transaction: EmbeddedBlockchainUpgradeTransactionDto,
}

impl EmbeddedTransactionInfoDto {
    pub fn new(meta: EmbeddedTransactionMetaDto, transaction: EmbeddedBlockchainUpgradeTransactionDto) -> EmbeddedTransactionInfoDto {
        EmbeddedTransactionInfoDto {
            meta,
            transaction,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct EmbeddedTransactionMetaDto {
    #[serde(rename = "height")]
    pub height: Uint64Dto,
    #[serde(rename = "hash")]
    pub hash: String,
    #[serde(rename = "merkleComponentHash")]
    pub merkle_component_hash: String,
    #[serde(rename = "index")]
    pub index: i32,
    #[serde(rename = "id")]
    pub id: String,
}

impl EmbeddedTransactionMetaDto {
    pub fn new(height: Uint64Dto, hash: String, merkle_component_hash: String, index: i32, id: String) -> EmbeddedTransactionMetaDto {
        EmbeddedTransactionMetaDto {
            height,
            hash,
            merkle_component_hash,
            index,
            id,
        }
    }
}
