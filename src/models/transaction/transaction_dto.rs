use chrono::format::Numeric::Timestamp;

use crate::models::blockchain::EmbeddedBlockchainUpgradeTransactionDto;
use crate::models::message::MessageDto;
use crate::models::mosaic::MosaicDto;
use crate::models::transaction::{deadline, TransactionStatus};
use crate::models::transaction::deadline::{BlockchainTimestamp, Deadline};
use crate::models::uint_64::Uint64Dto;

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionDto {
    pub signature: String,
    pub signer: String,
    pub version: i32,
    #[serde(rename = "type")]
    pub _type: u16,
    pub max_fee: Uint64Dto,
    pub deadline: Uint64Dto,
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionBodyDto {
    #[serde(rename = "max_fee")]
    pub max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    pub deadline: Uint64Dto,
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionHashes {
    /// The array of transaction hashes.
    #[serde(rename = "hashes", skip_serializing_if = "Option::is_none")]
    pub hashes: Option<Vec<String>>,
}

impl TransactionHashes {
    pub fn new() -> Self {
        TransactionHashes {
            hashes: None,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionIds {
    /// The array of transaction ids.
    #[serde(rename = "transactionIds", skip_serializing_if = "Option::is_none")]
    pub transaction_ids: Option<Vec<String>>,
}

impl TransactionIds {
    pub fn new() -> Self {
        TransactionIds {
            transaction_ids: None,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub(crate) struct TransactionInfoDto {
    #[serde(rename = "meta")]
    meta: TransactionMetaDto,
    #[serde(rename = "transaction")]
    transaction: EmbeddedBlockchainUpgradeTransactionDto,
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub(crate) struct TransactionMetaDto {
    height: Uint64Dto,
    hash: String,
    merkle_component_hash: String,
    index: u32,
    id: String,
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct TransactionStatusDto {
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    group: Option<String>,
    #[serde(rename = "status")]
    status: String,
    #[serde(rename = "hash", skip_serializing_if = "Option::is_none")]
    hash: Option<String>,
    #[serde(rename = "deadline", skip_serializing_if = "Option::is_none")]
    deadline: Option<Uint64Dto>,
    #[serde(rename = "height", skip_serializing_if = "Option::is_none")]
    height: Option<Uint64Dto>,
}

impl TransactionStatusDto {
    pub fn to_struct(&self) -> TransactionStatus {
        let dto = &self.to_owned();

        let deadline = loop {
            match &dto.deadline {
                Some(d) => break BlockchainTimestamp::new(d.to_struct().0 as i64),
                _ => {}
            }
        };

        TransactionStatus::new(
            dto.group.clone().unwrap(),
            dto.status.clone(),
            dto.hash.clone().unwrap(),
            Deadline::from(deadline),
            dto.height.clone().unwrap().to_struct(),
        )
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferTransactionBodyDto {
    /// If the bit 0 of byte 0 is not set (like in 0x90), then it is a regular address. Else (e.g. 0x91) it represents a namespace id which starts at byte 1.
    #[serde(rename = "recipient")]
    pub recipient: String,
    /// The array of mosaics sent to the recipient. If the most significant bit of byte 0 is set, a namespaceId (alias) is used instead of a instead of a mosaic_id corresponds to a mosaic_id.
    #[serde(rename = "mosaics")]
    pub mosaics: Vec<MosaicDto>,
    #[serde(rename = "message")]
    pub message: MessageDto,
}

impl TransferTransactionBodyDto {
    pub fn new(recipient: String, mosaics: Vec<MosaicDto>, message: MessageDto) -> Self {
        TransferTransactionBodyDto {
            recipient,
            mosaics,
            message,
        }
    }
}

/// TransferTransactionDto : Transaction that transfers mosaics and messages to another account.
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct TransferTransactionDto {
    /// The signature of the entity. The signature was generated by the signer and can be used to validate tha the entity data was not modified by a node.
    #[serde(rename = "signature")]
    pub signature: String,
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    pub signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    pub version: i32,
    #[serde(rename = "type")]
    pub _type: u16,
    #[serde(rename = "max_fee")]
    pub max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    pub deadline: Uint64Dto,
    /// If the bit 0 of byte 0 is not set (like in 0x90), then it is a regular address. Else (e.g. 0x91) it represents a namespace id which starts at byte 1.
    #[serde(rename = "recipient")]
    pub recipient: String,
    /// The array of mosaics sent to the recipient. If the most significant bit of byte 0 is set, a namespaceId (alias) is used instead of a instead of a mosaic_id corresponds to a mosaic_id.
    #[serde(rename = "mosaics")]
    pub mosaics: Vec<crate::models::mosaic::MosaicDto>,
    #[serde(rename = "message")]
    pub message: crate::models::message::MessageDto,
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct EmbeddedTransactionDto {
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    pub signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    pub version: i32,
    #[serde(rename = "type")]
    pub _type: u16,
    #[serde(rename = "max_fee")]
    pub max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    pub deadline: Uint64Dto,
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct EmbeddedTransactionInfoDto {
    #[serde(rename = "meta")]
    pub meta: EmbeddedTransactionMetaDto,
    #[serde(rename = "transaction")]
    pub transaction: EmbeddedBlockchainUpgradeTransactionDto,
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct EmbeddedTransactionMetaDto {
    #[serde(rename = "height")]
    pub height: Uint64Dto,
    #[serde(rename = "hash")]
    pub hash: String,
    #[serde(rename = "merkle_component_hash")]
    pub merkle_component_hash: String,
    #[serde(rename = "index")]
    pub index: i32,
    #[serde(rename = "id")]
    pub id: String,
}
