// automatically generated by the FlatBuffers compiler, do not modify



extern crate flatbuffers;

use std::cmp::Ordering;
use std::mem;

use self::flatbuffers::EndianScalar;


#[allow(unused_imports, dead_code)]
pub mod catapult {
    use std::cmp::Ordering;
    use std::mem;

    use self::flatbuffers::EndianScalar;

    extern crate flatbuffers;

    #[allow(unused_imports, dead_code)]
    pub mod buffers {
        use std::cmp::Ordering;
        use std::mem;

        use self::flatbuffers::EndianScalar;

        extern crate flatbuffers;

        pub enum NetworkConfigTransactionBufferOffset {}

        #[derive(Copy, Clone, Debug, PartialEq)]
        pub struct NetworkConfigTransactionBuffer<'a> {
            pub _tab: flatbuffers::Table<'a>,
        }

        impl<'a> flatbuffers::Follow<'a> for NetworkConfigTransactionBuffer<'a> {
            type Inner = NetworkConfigTransactionBuffer<'a>;
            #[inline]
            fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
                Self {
                    _tab: flatbuffers::Table { buf: buf, loc: loc },
                }
            }
        }

        impl<'a> NetworkConfigTransactionBuffer<'a> {
            #[inline]
            pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
                NetworkConfigTransactionBuffer {
                    _tab: table,
                }
            }
            #[allow(unused_mut)]
            pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
                _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
                args: &'args NetworkConfigTransactionBufferArgs<'args>) -> flatbuffers::WIPOffset<NetworkConfigTransactionBuffer<'bldr>> {
                let mut builder = NetworkConfigTransactionBufferBuilder::new(_fbb);
                if let Some(x) = args.supportedEntityVersions { builder.add_supportedEntityVersions(x); }
                if let Some(x) = args.networkConfig { builder.add_networkConfig(x); }
                if let Some(x) = args.applyHeightDelta { builder.add_applyHeightDelta(x); }
                if let Some(x) = args.deadline { builder.add_deadline(x); }
                if let Some(x) = args.maxFee { builder.add_maxFee(x); }
                builder.add_version(args.version);
                if let Some(x) = args.signer { builder.add_signer(x); }
                if let Some(x) = args.signature { builder.add_signature(x); }
                builder.add_size_(args.size_);
                builder.add_supportedEntityVersionsSize(args.supportedEntityVersionsSize);
                builder.add_networkConfigSize(args.networkConfigSize);
                builder.add_type_(args.type_);
                builder.finish()
            }

            pub const VT_SIZE_: flatbuffers::VOffsetT = 4;
            pub const VT_SIGNATURE: flatbuffers::VOffsetT = 6;
            pub const VT_SIGNER: flatbuffers::VOffsetT = 8;
            pub const VT_VERSION: flatbuffers::VOffsetT = 10;
            pub const VT_TYPE_: flatbuffers::VOffsetT = 12;
            pub const VT_MAXFEE: flatbuffers::VOffsetT = 14;
            pub const VT_DEADLINE: flatbuffers::VOffsetT = 16;
            pub const VT_APPLYHEIGHTDELTA: flatbuffers::VOffsetT = 18;
            pub const VT_NETWORKCONFIGSIZE: flatbuffers::VOffsetT = 20;
            pub const VT_SUPPORTEDENTITYVERSIONSSIZE: flatbuffers::VOffsetT = 22;
            pub const VT_NETWORKCONFIG: flatbuffers::VOffsetT = 24;
            pub const VT_SUPPORTEDENTITYVERSIONS: flatbuffers::VOffsetT = 26;

            #[inline]
            pub fn size_(&self) -> u32 {
                self._tab.get::<u32>(NetworkConfigTransactionBuffer::VT_SIZE_, Some(0)).unwrap()
            }
            #[inline]
            pub fn signature(&self) -> Option<&'a [u8]> {
                self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(NetworkConfigTransactionBuffer::VT_SIGNATURE, None).map(|v| v.safe_slice())
            }
            #[inline]
            pub fn signer(&self) -> Option<&'a [u8]> {
                self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(NetworkConfigTransactionBuffer::VT_SIGNER, None).map(|v| v.safe_slice())
            }
            #[inline]
            pub fn version(&self) -> u32 {
                self._tab.get::<u32>(NetworkConfigTransactionBuffer::VT_VERSION, Some(0)).unwrap()
            }
            #[inline]
            pub fn type_(&self) -> u16 {
                self._tab.get::<u16>(NetworkConfigTransactionBuffer::VT_TYPE_, Some(0)).unwrap()
            }
            #[inline]
            pub fn maxFee(&self) -> Option<flatbuffers::Vector<'a, u32>> {
                self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(NetworkConfigTransactionBuffer::VT_MAXFEE, None)
            }
            #[inline]
            pub fn deadline(&self) -> Option<flatbuffers::Vector<'a, u32>> {
                self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(NetworkConfigTransactionBuffer::VT_DEADLINE, None)
            }
            #[inline]
            pub fn applyHeightDelta(&self) -> Option<flatbuffers::Vector<'a, u32>> {
                self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(NetworkConfigTransactionBuffer::VT_APPLYHEIGHTDELTA, None)
            }
            #[inline]
            pub fn networkConfigSize(&self) -> u16 {
                self._tab.get::<u16>(NetworkConfigTransactionBuffer::VT_NETWORKCONFIGSIZE, Some(0)).unwrap()
            }
            #[inline]
            pub fn supportedEntityVersionsSize(&self) -> u16 {
                self._tab.get::<u16>(NetworkConfigTransactionBuffer::VT_SUPPORTEDENTITYVERSIONSSIZE, Some(0)).unwrap()
            }
            #[inline]
            pub fn networkConfig(&self) -> Option<&'a [u8]> {
                self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(NetworkConfigTransactionBuffer::VT_NETWORKCONFIG, None).map(|v| v.safe_slice())
            }
            #[inline]
            pub fn supportedEntityVersions(&self) -> Option<&'a [u8]> {
                self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(NetworkConfigTransactionBuffer::VT_SUPPORTEDENTITYVERSIONS, None).map(|v| v.safe_slice())
            }
        }

        pub struct NetworkConfigTransactionBufferArgs<'a> {
            pub size_: u32,
            pub signature: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
            pub signer: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
            pub version: u32,
            pub type_: u16,
            pub maxFee: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
            pub deadline: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
            pub applyHeightDelta: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
            pub networkConfigSize: u16,
            pub supportedEntityVersionsSize: u16,
            pub networkConfig: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
            pub supportedEntityVersions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        }

        impl<'a> Default for NetworkConfigTransactionBufferArgs<'a> {
            #[inline]
            fn default() -> Self {
                NetworkConfigTransactionBufferArgs {
                    size_: 0,
                    signature: None,
                    signer: None,
                    version: 0,
                    type_: 0,
                    maxFee: None,
                    deadline: None,
                    applyHeightDelta: None,
                    networkConfigSize: 0,
                    supportedEntityVersionsSize: 0,
                    networkConfig: None,
                    supportedEntityVersions: None,
                }
            }
        }

        pub struct NetworkConfigTransactionBufferBuilder<'a: 'b, 'b> {
            fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
            start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
        }

        impl<'a: 'b, 'b> NetworkConfigTransactionBufferBuilder<'a, 'b> {
            #[inline]
            pub fn add_size_(&mut self, size_: u32) {
                self.fbb_.push_slot::<u32>(NetworkConfigTransactionBuffer::VT_SIZE_, size_, 0);
            }
            #[inline]
            pub fn add_signature(&mut self, signature: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
                self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NetworkConfigTransactionBuffer::VT_SIGNATURE, signature);
            }
            #[inline]
            pub fn add_signer(&mut self, signer: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
                self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NetworkConfigTransactionBuffer::VT_SIGNER, signer);
            }
            #[inline]
            pub fn add_version(&mut self, version: u32) {
                self.fbb_.push_slot::<u32>(NetworkConfigTransactionBuffer::VT_VERSION, version, 0);
            }
            #[inline]
            pub fn add_type_(&mut self, type_: u16) {
                self.fbb_.push_slot::<u16>(NetworkConfigTransactionBuffer::VT_TYPE_, type_, 0);
            }
            #[inline]
            pub fn add_maxFee(&mut self, maxFee: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
                self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NetworkConfigTransactionBuffer::VT_MAXFEE, maxFee);
            }
            #[inline]
            pub fn add_deadline(&mut self, deadline: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
                self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NetworkConfigTransactionBuffer::VT_DEADLINE, deadline);
            }
            #[inline]
            pub fn add_applyHeightDelta(&mut self, applyHeightDelta: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
                self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NetworkConfigTransactionBuffer::VT_APPLYHEIGHTDELTA, applyHeightDelta);
            }
            #[inline]
            pub fn add_networkConfigSize(&mut self, networkConfigSize: u16) {
                self.fbb_.push_slot::<u16>(NetworkConfigTransactionBuffer::VT_NETWORKCONFIGSIZE, networkConfigSize, 0);
            }
            #[inline]
            pub fn add_supportedEntityVersionsSize(&mut self, supportedEntityVersionsSize: u16) {
                self.fbb_.push_slot::<u16>(NetworkConfigTransactionBuffer::VT_SUPPORTEDENTITYVERSIONSSIZE, supportedEntityVersionsSize, 0);
            }
            #[inline]
            pub fn add_networkConfig(&mut self, networkConfig: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
                self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NetworkConfigTransactionBuffer::VT_NETWORKCONFIG, networkConfig);
            }
            #[inline]
            pub fn add_supportedEntityVersions(&mut self, supportedEntityVersions: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
                self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NetworkConfigTransactionBuffer::VT_SUPPORTEDENTITYVERSIONS, supportedEntityVersions);
            }
            #[inline]
            pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> NetworkConfigTransactionBufferBuilder<'a, 'b> {
                let start = _fbb.start_table();
                NetworkConfigTransactionBufferBuilder {
                    fbb_: _fbb,
                    start_: start,
                }
            }
            #[inline]
            pub fn finish(self) -> flatbuffers::WIPOffset<NetworkConfigTransactionBuffer<'a>> {
                let o = self.fbb_.end_table(self.start_);
                flatbuffers::WIPOffset::new(o.value())
            }
        }

        #[inline]
        pub fn get_root_as_network_config_transaction_buffer<'a>(buf: &'a [u8]) -> NetworkConfigTransactionBuffer<'a> {
            flatbuffers::get_root::<NetworkConfigTransactionBuffer<'a>>(buf)
        }

        #[inline]
        pub fn get_size_prefixed_root_as_network_config_transaction_buffer<'a>(buf: &'a [u8]) -> NetworkConfigTransactionBuffer<'a> {
            flatbuffers::get_size_prefixed_root::<NetworkConfigTransactionBuffer<'a>>(buf)
        }

        #[inline]
        pub fn finish_network_config_transaction_buffer_buffer<'a, 'b>(
            fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
            root: flatbuffers::WIPOffset<NetworkConfigTransactionBuffer<'a>>) {
            fbb.finish(root, None);
        }

        #[inline]
        pub fn finish_size_prefixed_network_config_transaction_buffer_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<NetworkConfigTransactionBuffer<'a>>) {
            fbb.finish_size_prefixed(root, None);
        }
    }  // pub mod Buffers
}  // pub mod Catapult

