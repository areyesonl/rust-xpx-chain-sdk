/*
 * Copyright 2018 ProximaX Limited. All rights reserved.
 * Use of this source code is governed by the Apache 2.0
 * license that can be found in the LICENSE file.
 */

// automatically generated by the FlatBuffers compiler, do not modify

extern crate flatbuffers;

use std::cmp::Ordering;
use std::mem;

use self::fb::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod catapult {
    use std::cmp::Ordering;
    use std::mem;

    use self::fb::EndianScalar;

    extern crate flatbuffers;

    #[allow(unused_imports, dead_code)]
    pub mod buffers {
        use std::cmp::Ordering;
        use std::mem;

        use self::fb::EndianScalar;

        extern crate flatbuffers;

        pub enum BlockchainUpgradeTransactionBufferOffset {}

        #[derive(Copy, Clone, Debug, PartialEq)]
        pub struct BlockchainUpgradeTransactionBuffer<'a> {
            pub _tab: fb::Table<'a>,
        }

        impl<'a> fb::Follow<'a> for BlockchainUpgradeTransactionBuffer<'a> {
            type Inner = BlockchainUpgradeTransactionBuffer<'a>;
            #[inline]
            fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
                Self {
                    _tab: fb::Table { buf: buf, loc: loc },
                }
            }
        }

        impl<'a> BlockchainUpgradeTransactionBuffer<'a> {
            #[inline]
            pub fn init_from_table(table: fb::Table<'a>) -> Self {
                BlockchainUpgradeTransactionBuffer { _tab: table }
            }
            #[allow(unused_mut)]
            pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
                _fbb: &'mut_bldr mut fb::FlatBufferBuilder<'bldr>,
                args: &'args BlockchainUpgradeTransactionBufferArgs<'args>,
            ) -> fb::WIPOffset<BlockchainUpgradeTransactionBuffer<'bldr>> {
                let mut builder = BlockchainUpgradeTransactionBufferBuilder::new(_fbb);
                if let Some(x) = args.newBlockChainVersion {
                    builder.add_newBlockChainVersion(x);
                }
                if let Some(x) = args.upgradePeriod {
                    builder.add_upgradePeriod(x);
                }
                if let Some(x) = args.deadline {
                    builder.add_deadline(x);
                }
                if let Some(x) = args.maxFee {
                    builder.add_maxFee(x);
                }
                builder.add_version(args.version);
                if let Some(x) = args.signer {
                    builder.add_signer(x);
                }
                if let Some(x) = args.signature {
                    builder.add_signature(x);
                }
                builder.add_size_(args.size_);
                builder.add_type_(args.type_);
                builder.finish()
            }

            pub const VT_SIZE_: fb::VOffsetT = 4;
            pub const VT_SIGNATURE: fb::VOffsetT = 6;
            pub const VT_SIGNER: fb::VOffsetT = 8;
            pub const VT_VERSION: fb::VOffsetT = 10;
            pub const VT_TYPE_: fb::VOffsetT = 12;
            pub const VT_MAXFEE: fb::VOffsetT = 14;
            pub const VT_DEADLINE: fb::VOffsetT = 16;
            pub const VT_UPGRADEPERIOD: fb::VOffsetT = 18;
            pub const VT_NEWBLOCKCHAINVERSION: fb::VOffsetT = 20;

            #[inline]
            pub fn size_(&self) -> u32 {
                self._tab
                    .get::<u32>(BlockchainUpgradeTransactionBuffer::VT_SIZE_, Some(0))
                    .unwrap()
            }
            #[inline]
            pub fn signature(&self) -> Option<&'a [u8]> {
                self._tab
                    .get::<fb::ForwardsUOffset<fb::Vector<'a, u8>>>(
                        BlockchainUpgradeTransactionBuffer::VT_SIGNATURE,
                        None,
                    )
                    .map(|v| v.safe_slice())
            }
            #[inline]
            pub fn signer(&self) -> Option<&'a [u8]> {
                self._tab
                    .get::<fb::ForwardsUOffset<fb::Vector<'a, u8>>>(
                        BlockchainUpgradeTransactionBuffer::VT_SIGNER,
                        None,
                    )
                    .map(|v| v.safe_slice())
            }
            #[inline]
            pub fn version(&self) -> u32 {
                self._tab
                    .get::<u32>(BlockchainUpgradeTransactionBuffer::VT_VERSION, Some(0))
                    .unwrap()
            }
            #[inline]
            pub fn type_(&self) -> u16 {
                self._tab
                    .get::<u16>(BlockchainUpgradeTransactionBuffer::VT_TYPE_, Some(0))
                    .unwrap()
            }
            #[inline]
            pub fn maxFee(&self) -> Option<fb::Vector<'a, u32>> {
                self._tab.get::<fb::ForwardsUOffset<fb::Vector<'a, u32>>>(
                    BlockchainUpgradeTransactionBuffer::VT_MAXFEE,
                    None,
                )
            }
            #[inline]
            pub fn deadline(&self) -> Option<fb::Vector<'a, u32>> {
                self._tab.get::<fb::ForwardsUOffset<fb::Vector<'a, u32>>>(
                    BlockchainUpgradeTransactionBuffer::VT_DEADLINE,
                    None,
                )
            }
            #[inline]
            pub fn upgradePeriod(&self) -> Option<fb::Vector<'a, u32>> {
                self._tab.get::<fb::ForwardsUOffset<fb::Vector<'a, u32>>>(
                    BlockchainUpgradeTransactionBuffer::VT_UPGRADEPERIOD,
                    None,
                )
            }
            #[inline]
            pub fn newBlockChainVersion(&self) -> Option<fb::Vector<'a, u32>> {
                self._tab.get::<fb::ForwardsUOffset<fb::Vector<'a, u32>>>(
                    BlockchainUpgradeTransactionBuffer::VT_NEWBLOCKCHAINVERSION,
                    None,
                )
            }
        }

        pub struct BlockchainUpgradeTransactionBufferArgs<'a> {
            pub size_: u32,
            pub signature: Option<fb::WIPOffset<fb::Vector<'a, u8>>>,
            pub signer: Option<fb::WIPOffset<fb::Vector<'a, u8>>>,
            pub version: i32,
            pub type_: u16,
            pub maxFee: Option<fb::WIPOffset<fb::Vector<'a, u32>>>,
            pub deadline: Option<fb::WIPOffset<fb::Vector<'a, u32>>>,
            pub upgradePeriod: Option<fb::WIPOffset<fb::Vector<'a, u32>>>,
            pub newBlockChainVersion: Option<fb::WIPOffset<fb::Vector<'a, u32>>>,
        }

        impl<'a> Default for BlockchainUpgradeTransactionBufferArgs<'a> {
            #[inline]
            fn default() -> Self {
                BlockchainUpgradeTransactionBufferArgs {
                    size_: 0,
                    signature: None,
                    signer: None,
                    version: 0,
                    type_: 0,
                    maxFee: None,
                    deadline: None,
                    upgradePeriod: None,
                    newBlockChainVersion: None,
                }
            }
        }

        pub struct BlockchainUpgradeTransactionBufferBuilder<'a: 'b, 'b> {
            fbb_: &'b mut fb::FlatBufferBuilder<'a>,
            start_: fb::WIPOffset<fb::TableUnfinishedWIPOffset>,
        }

        impl<'a: 'b, 'b> BlockchainUpgradeTransactionBufferBuilder<'a, 'b> {
            #[inline]
            pub fn add_size_(&mut self, size_: u32) {
                self.fbb_
                    .push_slot::<u32>(BlockchainUpgradeTransactionBuffer::VT_SIZE_, size_, 0);
            }
            #[inline]
            pub fn add_signature(&mut self, signature: fb::WIPOffset<fb::Vector<'b, u8>>) {
                self.fbb_.push_slot_always::<fb::WIPOffset<_>>(
                    BlockchainUpgradeTransactionBuffer::VT_SIGNATURE,
                    signature,
                );
            }
            #[inline]
            pub fn add_signer(&mut self, signer: fb::WIPOffset<fb::Vector<'b, u8>>) {
                self.fbb_.push_slot_always::<fb::WIPOffset<_>>(
                    BlockchainUpgradeTransactionBuffer::VT_SIGNER,
                    signer,
                );
            }
            #[inline]
            pub fn add_version(&mut self, version: i32) {
                self.fbb_.push_slot::<u32>(
                    BlockchainUpgradeTransactionBuffer::VT_VERSION,
                    version,
                    0,
                );
            }
            #[inline]
            pub fn add_type_(&mut self, type_: u16) {
                self.fbb_
                    .push_slot::<u16>(BlockchainUpgradeTransactionBuffer::VT_TYPE_, type_, 0);
            }
            #[inline]
            pub fn add_maxFee(&mut self, maxFee: fb::WIPOffset<fb::Vector<'b, u32>>) {
                self.fbb_.push_slot_always::<fb::WIPOffset<_>>(
                    BlockchainUpgradeTransactionBuffer::VT_MAXFEE,
                    maxFee,
                );
            }
            #[inline]
            pub fn add_deadline(&mut self, deadline: fb::WIPOffset<fb::Vector<'b, u32>>) {
                self.fbb_.push_slot_always::<fb::WIPOffset<_>>(
                    BlockchainUpgradeTransactionBuffer::VT_DEADLINE,
                    deadline,
                );
            }
            #[inline]
            pub fn add_upgradePeriod(&mut self, upgradePeriod: fb::WIPOffset<fb::Vector<'b, u32>>) {
                self.fbb_.push_slot_always::<fb::WIPOffset<_>>(
                    BlockchainUpgradeTransactionBuffer::VT_UPGRADEPERIOD,
                    upgradePeriod,
                );
            }
            #[inline]
            pub fn add_newBlockChainVersion(
                &mut self,
                newBlockChainVersion: fb::WIPOffset<fb::Vector<'b, u32>>,
            ) {
                self.fbb_.push_slot_always::<fb::WIPOffset<_>>(
                    BlockchainUpgradeTransactionBuffer::VT_NEWBLOCKCHAINVERSION,
                    newBlockChainVersion,
                );
            }
            #[inline]
            pub fn new(
                _fbb: &'b mut fb::FlatBufferBuilder<'a>,
            ) -> BlockchainUpgradeTransactionBufferBuilder<'a, 'b> {
                let start = _fbb.start_table();
                BlockchainUpgradeTransactionBufferBuilder {
                    fbb_: _fbb,
                    start_: start,
                }
            }
            #[inline]
            pub fn finish(self) -> fb::WIPOffset<BlockchainUpgradeTransactionBuffer<'a>> {
                let o = self.fbb_.end_table(self.start_);
                fb::WIPOffset::new(o.value())
            }
        }

        #[inline]
        pub fn get_root_as_blockchain_upgrade_transaction_buffer<'a>(
            buf: &'a [u8],
        ) -> BlockchainUpgradeTransactionBuffer<'a> {
            fb::get_root::<BlockchainUpgradeTransactionBuffer<'a>>(buf)
        }

        #[inline]
        pub fn get_size_prefixed_root_as_blockchain_upgrade_transaction_buffer<'a>(
            buf: &'a [u8],
        ) -> BlockchainUpgradeTransactionBuffer<'a> {
            fb::get_size_prefixed_root::<BlockchainUpgradeTransactionBuffer<'a>>(buf)
        }

        #[inline]
        pub fn finish_blockchain_upgrade_transaction_buffer_buffer<'a, 'b>(
            fbb: &'b mut fb::FlatBufferBuilder<'a>,
            root: fb::WIPOffset<BlockchainUpgradeTransactionBuffer<'a>>,
        ) {
            fbb.finish(root, None);
        }

        #[inline]
        pub fn finish_size_prefixed_blockchain_upgrade_transaction_buffer_buffer<'a, 'b>(
            fbb: &'b mut fb::FlatBufferBuilder<'a>,
            root: fb::WIPOffset<BlockchainUpgradeTransactionBuffer<'a>>,
        ) {
            fbb.finish_size_prefixed(root, None);
        }
    } // pub mod Buffers
} // pub mod Catapult
