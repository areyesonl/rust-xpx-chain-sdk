use crate::models::entity_dto::EntityType;
use crate::models::uint_64::Uint64Dto;

use super::transaction::EmbeddedTransactionInfoDto;

/// AggregateTransactionDto : Transaction that combines multiple transactions together.
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct AggregateTransactionDto {
    /// The signature of the entity. The signature was generated by the signer and can be used to validate tha the entity data was not modified by a node. 
    #[serde(rename = "signature")]
    pub signature: String,
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    pub signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    pub version: i32,
    #[serde(rename = "type")]
    pub _type: EntityType,
    #[serde(rename = "max_fee")]
    pub max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    pub deadline: Uint64Dto,
    /// An array of transaction cosignatures.
    #[serde(rename = "cosignatures")]
    pub cosignatures: Vec<crate::models::multisig::CosignatureDto>,
    /// The array of transactions initiated by different accounts.
    #[serde(rename = "transactions")]
    pub transactions: Vec<EmbeddedTransactionInfoDto>,
}

impl AggregateTransactionDto {
    /// Transaction that combines multiple transactions together.
    pub fn new(signature: String, signer: String, version: i32, _type: EntityType, max_fee: Uint64Dto, deadline: Uint64Dto, cosignatures: Vec<crate::models::multisig::CosignatureDto>, transactions: Vec<crate::models::transaction::EmbeddedTransactionInfoDto>) -> AggregateTransactionDto {
        AggregateTransactionDto {
            signature,
            signer,
            version,
            _type,
            max_fee,
            deadline,
            cosignatures,
            transactions,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct AggregateTransactionBodyDto {
    /// An array of transaction cosignatures.
    #[serde(rename = "cosignatures")]
    pub cosignatures: Vec<crate::models::multisig::CosignatureDto>,
    /// The array of transactions initiated by different accounts.
    #[serde(rename = "transactions")]
    pub transactions: Vec<crate::models::transaction::EmbeddedTransactionInfoDto>,
}

impl AggregateTransactionBodyDto {
    pub fn new(cosignatures: Vec<crate::models::multisig::CosignatureDto>, transactions: Vec<crate::models::transaction::EmbeddedTransactionInfoDto>) -> AggregateTransactionBodyDto {
        AggregateTransactionBodyDto {
            cosignatures,
            transactions,
        }
    }
}
