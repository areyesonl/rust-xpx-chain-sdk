use crate::models::multisig::CosignatoryModificationDto;
use crate::models::uint_64::Uint64Dto;
use crate::models::transaction::TransactionMetaDto;

#[derive(Serialize, Deserialize)]
pub(crate) struct MultisigDto {
    /// The account public key.
    #[serde(rename = "account")]
    pub account: String,
    /// The account address in hexadecimal.
    #[serde(rename = "accountAddress", skip_serializing_if = "Option::is_none")]
    pub account_address: Option<String>,
    /// The number of signatures needed to approve a transaction.
    #[serde(rename = "minApproval")]
    pub min_approval: i32,
    /// The number of signatures needed to remove a cosignatory.
    #[serde(rename = "minRemoval")]
    pub min_removal: i32,
    /// The array of public keys of the cosignatory accounts.
    #[serde(rename = "cosignatories")]
    pub cosignatories: Vec<String>,
    /// The array of multisig accounts where the account is cosignatory.
    #[serde(rename = "multisigAccounts")]
    pub multisig_accounts: Vec<String>,
}

#[derive(Serialize, Deserialize)]
pub(crate) struct MultisigAccountGraphInfoDto {
    /// The level of the multisig account.
    #[serde(rename = "level")]
    pub level: i32,
    /// The array of multisig accounts for this level.
    #[serde(rename = "multisigEntries")]
    pub multisig_entries: Vec<MultisigAccountInfoDto>,
}

#[derive(Serialize, Deserialize)]
pub(crate) struct MultisigAccountInfoDto {
    #[serde(rename = "multisig")]
    pub multisig: MultisigDto,
}

#[derive(Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub(crate) struct ModifyMultisigAccountTransactionInfoDto {
    pub meta: TransactionMetaDto,
    pub transaction: ModifyMultisigAccountTransactionDto,
}

/// ModifyMultisigAccountTransactionDto : Transaction that creates or modifies a multisig account.
#[derive(Serialize, Deserialize)]
pub(crate) struct ModifyMultisigAccountTransactionDto {
    /// The signature of the entity. The signature was generated by the signer and can be used to validate tha the entity data was not modified by a node.
    #[serde(rename = "signature")]
    pub signature: String,
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    pub signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    pub version: u32,
    #[serde(rename = "type")]
    pub _type: u16,
    #[serde(rename = "max_fee")]
    pub max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    pub deadline: Uint64Dto,
    /// The number of signatures needed to remove a cosignatory. If we are modifying an existing multisig account, this indicates the relative change of the minimum cosignatories.
    #[serde(rename = "min_removal_delta")]
    pub min_removal_delta: i32,
    /// The number of signatures needed to approve a transaction. If we are modifying an existing multisig account, this indicates the relative change of the minimum cosignatories.
    #[serde(rename = "min_approval_delta")]
    pub min_approval_delta: i32,
    /// The array of cosignatory accounts to add or delete.
    #[serde(rename = "modifications")]
    pub modifications: Vec<CosignatoryModificationDto>,
}