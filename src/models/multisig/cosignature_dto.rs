#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct CosignatureDto {
    /// The signature of the entity. The signature was generated by the signer and can be used to validate tha the entity data was not modified by a node. 
    #[serde(rename = "signature")]
    pub signature: String,
    /// The public key of the transaction signer.
    #[serde(rename = "signer")]
    pub signer: String,
}

impl CosignatureDto {
    pub fn new(signature: String, signer: String) -> CosignatureDto {
        CosignatureDto {
            signature,
            signer,
        }
    }
}

#[derive(Serialize, Deserialize)]
pub struct CosignatoryModificationDto {
    #[serde(rename = "modificationType")]
    pub modification_type: crate::models::multisig::MultisigModificationTypeEnum,
    /// The public key of the cosignatory account.
    #[serde(rename = "cosignatoryPublicKey")]
    pub cosignatory_public_key: String,
}

impl CosignatoryModificationDto {
    pub fn new(modification_type: crate::models::multisig::MultisigModificationTypeEnum, cosignatory_public_key: String) -> CosignatoryModificationDto {
        CosignatoryModificationDto {
            modification_type,
            cosignatory_public_key,
        }
    }
}

#[derive(Serialize, Deserialize)]
pub struct Cosignature {
    /// The hash of parent aggregate transaction that has been signed by a cosignatory of the transaction.
    #[serde(rename = "parentHash", skip_serializing_if = "Option::is_none")]
    pub parent_hash: Option<String>,
    /// The signatures generated by signing the parent aggregate transaction hash.
    #[serde(rename = "signature", skip_serializing_if = "Option::is_none")]
    pub signature: Option<String>,
    /// The signer of the transaction.
    #[serde(rename = "signer", skip_serializing_if = "Option::is_none")]
    pub signer: Option<String>,
}

impl Cosignature {
    pub fn new() -> Cosignature {
        Cosignature {
            parent_hash: None,
            signature: None,
            signer: None,
        }
    }
}

#[derive(Serialize, Deserialize)]
pub struct CosignatureDtoAllOf {
    /// The public key of the transaction signer.
    #[serde(rename = "signer")]
    pub signer: String,
}

impl CosignatureDtoAllOf {
    pub fn new(signer: String) -> CosignatureDtoAllOf {
        CosignatureDtoAllOf {
            signer,
        }
    }
}

