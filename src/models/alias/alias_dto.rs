use crate::models::uint_64::Uint64Dto;
use crate::models::namespace::NamespaceAlias;
use crate::models::account::Address;
use crate::models::mosaic::MosaicId;

#[derive(Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub(crate) struct AliasDto {
    #[serde(rename = "type")]
    pub _type: u16,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mosaic_id: Option<Uint64Dto>,
    /// The aliased address in hexadecimal.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
}

impl AliasDto {
    pub fn to_struct(&self)-> crate::Result<NamespaceAlias> {

        let mut alias = NamespaceAlias::default();
        alias.type_ = self._type as u8;

        if let Some(a) = &self.address {
                let address = Address::from_encoded(a)?;
                alias.address = Some(address)
        };

        if let Some(m) = &self.mosaic_id {
            let mosaic_id = MosaicId::from(m.to_struct());
            alias.mosaic_id = Some(mosaic_id)
        }

        Ok(alias)
    }
}

#[derive(Serialize, Deserialize)]
struct AddressAliasTransactionBodyDto {
    #[serde(rename = "aliasAction")]
    alias_action: u8,
    #[serde(rename = "namespace_id")]
    namespace_id: Uint64Dto,
    /// The aliased address in hexadecimal.
    #[serde(rename = "address")]
    address: String,
}

/// AddressAliasTransactionDto : Transaction that attaches a namespace to an account.
#[derive(Serialize, Deserialize)]
struct AddressAliasTransactionDto {
    /// The signature of the entity. The signature was generated by the signer and can be used to validate tha the entity data was not modified by a node.
    #[serde(rename = "signature")]
    signature: String,
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    version: u32,
    #[serde(rename = "type")]
    _type: u16,
    #[serde(rename = "max_fee")]
    max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    deadline: Uint64Dto,
    #[serde(rename = "aliasAction")]
    alias_action: u8,
    #[serde(rename = "namespace_id")]
    namespace_id: Uint64Dto,
    /// The aliased address in hexadecimal.
    #[serde(rename = "address")]
    address: String,
}

#[derive(Serialize, Deserialize)]
struct MosaicAliasTransactionBodyDto {
    #[serde(rename = "aliasAction")]
    alias_action: u8,
    #[serde(rename = "namespace_id")]
    namespace_id: Uint64Dto,
    #[serde(rename = "mosaic_id")]
    mosaic_id: Uint64Dto,
}

/// MosaicAliasTransactionDto : Transaction that attaches a namespace to a mosaic.
#[derive(Serialize, Deserialize)]
struct MosaicAliasTransactionDto {
    /// The signature of the entity. The signature was generated by the signer and can be used to validate tha the entity data was not modified by a node.
    #[serde(rename = "signature")]
    signature: String,
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    version: u32,
    #[serde(rename = "type")]
    _type: u16,
    #[serde(rename = "max_fee")]
    max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    deadline: Uint64Dto,
    #[serde(rename = "aliasAction")]
    alias_action: u8,
    #[serde(rename = "namespace_id")]
    namespace_id: Uint64Dto,
    #[serde(rename = "mosaic_id")]
    mosaic_id: Uint64Dto,
}

#[derive(Serialize, Deserialize)]
struct EmbeddedAddressAliasTransactionDto {
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    version: u32,
    #[serde(rename = "type")]
    _type: u16,
    #[serde(rename = "max_fee")]
    max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    deadline: Uint64Dto,
    #[serde(rename = "aliasAction")]
    alias_action: u8,
    #[serde(rename = "namespace_id")]
    namespace_id: Uint64Dto,
    /// The aliased address in hexadecimal.
    #[serde(rename = "address")]
    address: String,
}

#[derive(Serialize, Deserialize)]
struct EmbeddedMosaicAliasTransactionDto {
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    version: u32,
    #[serde(rename = "type")]
    _type: u16,
    #[serde(rename = "max_fee")]
    max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    deadline: Uint64Dto,
    #[serde(rename = "aliasAction")]
    alias_action: u8,
    #[serde(rename = "namespace_id")]
    namespace_id: Uint64Dto,
    #[serde(rename = "mosaic_id")]
    mosaic_id: Uint64Dto,
}
