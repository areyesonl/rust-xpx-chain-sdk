use crate::models::{Uint64, uint_64::Uint64Dto};
use crate::models::entity_dto::EntityType;
use crate::models::alias::AliasActionEnum;

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct AliasDto {
    #[serde(rename = "type")]
    pub _type: u16,
    #[serde(rename = "mosaic_id", skip_serializing_if = "Option::is_none")]
    pub mosaic_id: Option<Uint64>,
    /// The aliased address in hexadecimal.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
}

impl AliasDto {
    pub fn new(_type: u16) -> AliasDto {
        AliasDto {
            _type,
            mosaic_id: None,
            address: None,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct AddressAliasTransactionBodyDto {
    #[serde(rename = "aliasAction")]
    pub alias_action: AliasActionEnum,
    #[serde(rename = "namespaceId")]
    pub namespace_id: Uint64Dto,
    /// The aliased address in hexadecimal.
    #[serde(rename = "address")]
    pub address: String,
}

impl AddressAliasTransactionBodyDto {
    pub fn new(alias_action: AliasActionEnum, namespace_id: Uint64Dto, address: String) -> AddressAliasTransactionBodyDto {
        AddressAliasTransactionBodyDto {
            alias_action,
            namespace_id,
            address,
        }
    }
}

/// AddressAliasTransactionDto : Transaction that attaches a namespace to an account.
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct AddressAliasTransactionDto {
    /// The signature of the entity. The signature was generated by the signer and can be used to validate tha the entity data was not modified by a node.
    #[serde(rename = "signature")]
    pub signature: String,
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    pub signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    pub version: i32,
    #[serde(rename = "type")]
    pub _type: EntityType,
    #[serde(rename = "max_fee")]
    pub max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    pub deadline: Uint64Dto,
    #[serde(rename = "aliasAction")]
    pub alias_action: AliasActionEnum,
    #[serde(rename = "namespaceId")]
    pub namespace_id: Uint64Dto,
    /// The aliased address in hexadecimal.
    #[serde(rename = "address")]
    pub address: String,
}

impl AddressAliasTransactionDto {
    /// Transaction that attaches a namespace to an account.
    pub fn new(signature: String, signer: String, version: i32, _type: EntityType, max_fee: Uint64Dto, deadline: Uint64Dto, alias_action: crate::models::alias::AliasActionEnum, namespace_id: Uint64Dto, address: String) -> AddressAliasTransactionDto {
        AddressAliasTransactionDto {
            signature,
            signer,
            version,
            _type,
            max_fee,
            deadline,
            alias_action,
            namespace_id,
            address,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct MosaicAliasTransactionBodyDto {
    #[serde(rename = "aliasAction")]
    pub alias_action: AliasActionEnum,
    #[serde(rename = "namespaceId")]
    pub namespace_id: Uint64Dto,
    #[serde(rename = "mosaic_id")]
    pub mosaic_id: Uint64Dto,
}

impl MosaicAliasTransactionBodyDto {
    pub fn new(alias_action: AliasActionEnum, namespace_id: Uint64Dto, mosaic_id: Uint64Dto) -> MosaicAliasTransactionBodyDto {
        MosaicAliasTransactionBodyDto {
            alias_action,
            namespace_id,
            mosaic_id,
        }
    }
}

/// MosaicAliasTransactionDto : Transaction that attaches a namespace to a mosaic.
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct MosaicAliasTransactionDto {
    /// The signature of the entity. The signature was generated by the signer and can be used to validate tha the entity data was not modified by a node.
    #[serde(rename = "signature")]
    pub signature: String,
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    pub signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    pub version: i32,
    #[serde(rename = "type")]
    pub _type: EntityType,
    #[serde(rename = "max_fee")]
    pub max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    pub deadline: Uint64Dto,
    #[serde(rename = "aliasAction")]
    pub alias_action: AliasActionEnum,
    #[serde(rename = "namespaceId")]
    pub namespace_id: Uint64Dto,
    #[serde(rename = "mosaic_id")]
    pub mosaic_id: Uint64Dto,
}

impl MosaicAliasTransactionDto {
    /// Transaction that attaches a namespace to a mosaic.
    pub fn new(signature: String, signer: String, version: i32, _type: EntityType, max_fee: Uint64Dto, deadline: Uint64Dto, alias_action: crate::models::alias::AliasActionEnum, namespace_id: Uint64Dto, mosaic_id: Uint64Dto) -> MosaicAliasTransactionDto {
        MosaicAliasTransactionDto {
            signature,
            signer,
            version,
            _type,
            max_fee,
            deadline,
            alias_action,
            namespace_id,
            mosaic_id,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct EmbeddedAddressAliasTransactionDto {
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    pub signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    pub version: i32,
    #[serde(rename = "type")]
    pub _type: EntityType,
    #[serde(rename = "max_fee")]
    pub max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    pub deadline: Uint64Dto,
    #[serde(rename = "aliasAction")]
    pub alias_action: AliasActionEnum,
    #[serde(rename = "namespaceId")]
    pub namespace_id: Uint64Dto,
    /// The aliased address in hexadecimal.
    #[serde(rename = "address")]
    pub address: String,
}

impl EmbeddedAddressAliasTransactionDto {
    pub fn new(signer: String, version: i32, _type: EntityType, max_fee: Uint64Dto, deadline: Uint64Dto, alias_action: crate::models::alias::AliasActionEnum, namespace_id: Uint64Dto, address: String) -> EmbeddedAddressAliasTransactionDto {
        EmbeddedAddressAliasTransactionDto {
            signer,
            version,
            _type,
            max_fee,
            deadline,
            alias_action,
            namespace_id,
            address,
        }
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct EmbeddedMosaicAliasTransactionDto {
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    version: i32,
    #[serde(rename = "type")]
    _type: EntityType,
    #[serde(rename = "max_fee")]
    max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    deadline: Uint64Dto,
    #[serde(rename = "aliasAction")]
    alias_action: AliasActionEnum,
    #[serde(rename = "namespaceId")]
    namespace_id: Uint64Dto,
    #[serde(rename = "mosaic_id")]
    mosaic_id: Uint64Dto,
}

impl EmbeddedMosaicAliasTransactionDto {
    pub fn new(signer: String, version: i32, _type: EntityType, max_fee: Uint64Dto, deadline: Uint64Dto, alias_action: crate::models::alias::AliasActionEnum, namespace_id: Uint64Dto, mosaic_id: Uint64Dto) -> EmbeddedMosaicAliasTransactionDto {
        EmbeddedMosaicAliasTransactionDto {
            signer,
            version,
            _type,
            max_fee,
            deadline,
            alias_action,
            namespace_id,
            mosaic_id,
        }
    }
}
