use crate::models::account::Address;
use crate::models::alias::AliasActionType;
use crate::models::mosaic::MosaicId;
use crate::models::namespace::{NamespaceAlias, NamespaceId};
use crate::models::transaction::{AbstractTransactionDto, AddressAliasTransaction, AliasTransaction, Transaction, TransactionDto, TransactionMetaDto};
use crate::models::uint_64::Uint64Dto;

#[derive(Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub(crate) struct AliasDto {
    #[serde(rename = "type")]
    pub _type: u16,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mosaic_id: Option<Uint64Dto>,
    /// The aliased address in hexadecimal.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
}

impl AliasDto {
    pub fn to_struct(&self) -> crate::Result<NamespaceAlias> {
        let mut alias = NamespaceAlias::default();
        alias.type_ = self._type as u8;

        if let Some(a) = &self.address {
            let address = Address::from_encoded(a)?;
            alias.address = Some(address)
        };

        if let Some(m) = &self.mosaic_id {
            let mosaic_id = MosaicId::from(m.to_struct());
            alias.mosaic_id = Some(mosaic_id)
        }

        Ok(alias)
    }
}

#[derive(Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub(crate) struct AliasTransactionDto {
    pub action_type: u8,
    pub namespace_id: Uint64Dto,
}

/// AddressAliasTransactionDto :
/// Transaction that attaches a namespace to an account.
#[derive(Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub(crate) struct AddressAliasTransactionDto {
    #[serde(skip_serializing_if = "Option::is_none")]
    signature: Option<String>,
    signer: String,
    version: u32,
    #[serde(rename = "type")]
    _type: u16,
    #[serde(skip_serializing_if = "Option::is_none")]
    max_fee: Option<Uint64Dto>,
    #[serde(skip_serializing_if = "Option::is_none")]
    deadline: Option<Uint64Dto>,
    namespace_id: Uint64Dto,
    alias_action: u8,
    address: String
}

#[derive(Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub(crate) struct AddressAliasTransactionInfoDto {
    pub meta: TransactionMetaDto,
    pub transaction: AddressAliasTransactionDto,
}

#[typetag::serde]
impl TransactionDto for AddressAliasTransactionInfoDto {
    fn to_struct(&self) -> crate::Result<Box<dyn Transaction>> {
        let dto = self.transaction.clone();

        let info = self.meta.to_struct();

        let address = Address::from_encoded(&dto.address)?;

        let abs = AbstractTransactionDto::new(
            dto.signature.to_owned(), dto.signer.to_owned(), dto.version,
            dto._type, dto.max_fee.to_owned(), dto.deadline.to_owned()
        ).to_struct(info)?;

        Ok(Box::new(AddressAliasTransaction {
            alias_transaction: AliasTransaction {
                abs_transaction: abs,
                action_type: AliasActionType::from(dto.alias_action),
                namespace_id: NamespaceId::from(dto.namespace_id.to_struct())
            },
            address
        }))
    }
}

/// MosaicAliasTransactionDto : Transaction that attaches a namespace to a mosaic.
#[derive(Serialize, Deserialize)]
struct MosaicAliasTransactionDto {
    /// The signature of the entity. The signature was generated by the signer and can be used to validate tha the entity data was not modified by a node.
    #[serde(rename = "signature")]
    signature: String,
    /// The public key of the entity signer formatted as hexadecimal.
    #[serde(rename = "signer")]
    signer: String,
    /// The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - PUBLIC main network. * 0x98 (TEST_NET) - PUBLIC test network. * 0x60 (MIJIN) - PRIVATE network. * 0x90 (MIJIN_TEST) - PRIVATE test network.
    #[serde(rename = "version")]
    version: u32,
    #[serde(rename = "type")]
    _type: u16,
    #[serde(rename = "max_fee")]
    max_fee: Uint64Dto,
    #[serde(rename = "deadline")]
    deadline: Uint64Dto,
    #[serde(rename = "aliasAction")]
    alias_action: u8,
    #[serde(rename = "namespace_id")]
    namespace_id: Uint64Dto,
    #[serde(rename = "mosaic_id")]
    mosaic_id: Uint64Dto,
}
